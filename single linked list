
/* Single linked list operation*/
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* link;
};
struct node* root=NULL;
int len;

void append(void);
void addatbegin(void);
void addatafter(void);
int lentgh(void);
void display(void);
void delete (void); 
void main()
{
    int ch;
    while(1)
    {
        printf("\n\nsingle linked implementation\n");
        printf("1.Append\n");
        printf("2.Addatbegin\n");
        printf("3.Addatafter\n");
        printf("4.Lentgh\n");
        printf("5.Display\n");
        printf("6.Delete\n");
        printf("7.Quit\n");

        printf("enter your choise\n");
        scanf("%d", &ch);

        switch(ch)
        {
            case 1 : append();
                    break;

            case 2 : addatbegin();
                    break;

            case 3 : addatafter();
                    break;

            case 4 : len=lentgh();
                     printf("lentgh is: %d", len);
                    break;

            case 5 : display();
                    break;
            
            case 6 : delete();
                    break;
            
            case 7 : exit(1);
            
            default : printf("invalid choice");
        }
    }
}
void append()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));                               /*node creation*/
    printf("enter node data : \n");
    scanf("%d", &temp->data);
    temp->link=NULL;

    if(root==NULL)      //list is empty
    {
        root=temp;
    }
    else
    {
        struct node* p;
        p=root;
        
        while(p->link !=NULL)
        {
            p=p->link;
        }
        p->link=temp;
    }
    
}
int lentgh()
{
    int count=0;
    struct  node* temp;
    temp= root;
    while(temp!=NULL)
    {
        count++;
        temp=temp->link;
    }
    return count;
}
void display()
{
    struct node* temp;
    temp=root;
    if(temp==NULL)
    {
        printf("list is empty");
    }
    else
    {
        while(temp!=NULL)
        {
            printf("%d-->", temp->data);
            temp=temp->link;
        }
        printf("\n\n");
    }
}
void addatbegin(void)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("enter node data:-\n");
    scanf("%d", &temp->data);
    temp->link=NULL;
    if(root==NULL)                                           //in case linked list is empty
    {
        root=temp;
    }
    else
    {
        temp->link=root;                                    //right connection
        root=temp;                                          //left connection
    }
}
void addatafter(void)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    struct node* p;
    int loc, i=1,item;
    printf("enter location\n");
    scanf("%d", &loc);
    if(temp==NULL)
    {
        printf("overflow\n");
    }
    else
    {
        printf("enter element to enter\n");
        scanf("%d",&item);
        temp->data=item;
        printf("enter location\n");
        scanf("%d", &loc);
        p=root;
        for(i=0;i<loc;i++)
        {
            p=p->link;
            if(p==NULL)
            {
                printf("cant insert\n");
                return;
            }
        }
        temp->link=p->link;
        p->link=temp;
        printf("inserted");

    }
}
void delete(void)
{
    struct node* temp;
    int loc;
    printf("enter the location:\n");
    scanf("%d", &loc);
    if(loc>len)
    {
        printf("invalid location \n");
    }
    else if(loc==1)
    {
        temp=root;
        root=temp->link;
        temp->link=NULL;
        free(temp);
    }
    else
    {
        struct node *p=root, *q;
        int i=1;
        while (i<loc-1)
        {
            p=p->link;
            i++;
        }
        q=p->link;
        p->link=q->link;
        q->link=NULL;
        free(q);
        
        
    }
    
}
